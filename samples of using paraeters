# 1. use POSITIOAL PARAMETERS to calculate n to the power of x:
def exponent_origin(base, exp):
	origin = 1
	for exp in range(exp):
		origin = origin * base
	return origin

base = input('please enter the base number\n')
exp = input('please enter the exponent number\n')
base = int(base)
exp = int(exp)

print(exponent_origin(base,exp))

# 2. use DEFAULT PARAMETERS to show data efficiently, when you need to call the 
# function, just fill in the necessary parameters. If you don't fill the 
# parameters in order, then you need to enter the name of the parameter. 
# NOTE that we need to add " city = 'Tokyo'" in line 33.

# NOTE that the default parameters MUST be pointed to immutable objects, 
# otherwise they may be changed after call and you'll get mistakes afterwards.

def enroll(name, gender, age=20, city='Beijing'):
	print('yes')
	print('name:', name)
	print('gender:', gender)
	print('age:', age)
	print('city:', city)
	print()
	return
print(enroll('Mike', 'Male'))
print(enroll('Zhang', 'Male', 30))
print(enroll('Hinata', 'Female', city='Tokyo'))

# 3. use MUTABLE PARAMETERS when you don't know how many parameters would be 
# entered when the function is called. After using * , the parameter receives
# a tuple and use the tuple in calculation when the function is called.

# for example: calaulating a^2 + b^2 + ...
def cal_old(numbers):
	sum = 0
	for n in numbers:
		sum += n*n
	return sum
print(cal_old([1,2,3]))

def cal_new(*numbers):
	sum = 0
	for n in numbers:
		sum += n*n
	return sum
print(cal_new(1, 2, 3))		# In this situation, numbers is a tuple.

# use a list or a tuple as the mutable parameter:
list_a = (2, 3, 4)
print(cal_new(*list_a))
list_b = [2,3,4]
print(cal_new(*list_b))

# Use KEYWORD PARAMETERS when you need a dict with mutable numbers of
# parameters. Use NAMED KEYWORD PARAETERS when you need to make sure that
# the function only receives certain keyword parameters.
def f1(a, b, c=0, *args, **kw):
    print('a =', a, 
		'b =', b, 
		'c =', c, 
		'd =', d,
		'args =', args, 
		'kw =', kw
		)

def f2(a, b, c=0, *, d, e,  **kw):
    print('a =', a, 
		'b =', b, 
		'c =', c, 
		'd =', d,
		'e =', e,
		'kw =', kw
		)

f1(1,2)
f1(1,2,3,'a','b',x = 99,y = 100)
f1(1,2,'a','b',x = 99,y = 100)		# Note that in this case, the output is:
# a = 1 b = 2 c = a d = b args = ('b',) kw = {'x': 99, 'y': 100}
# which means when the default parameter is in front of mutable parameter, the
# default parameter will be set as the values of hte mutable parameter.

f2(1,2,d = 99, ext = None, logo = 'Yes!')
f2(1,2,d = 99, e = 100, ext = None, logo = 'Yes!')
